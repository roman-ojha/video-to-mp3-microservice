-> Reference code: https://github.com/selikapro/microservices-python
Application which will convert video to mp3 using microservices architecture

*) System Design:
    -> './01_System_Design.png'
    -> When a user upload a video to be converted into mp3 it will first it an "api Gateway" then Our gateway will store the video into "MongoDB" and then it will put a message into "Queue(RabbitMQ)"
    -> Then the "video to mp3 converter service" will consume message from the "Queue" it will then get the id from the message, pull the video from the "MongoDB" convert the video to mp3 then store the mp3 on "mongoDB" 
    -> then Put a new message into "Queue" to be consume by the "notification service" which say that the conversion job is done, then the notification service consume those messages from the "Queue" and Send an Email notification to the client Informing the client that the mp3 for the video has been converted and ready for download.
    -> Client can use the URL with the MP3 id with it's Authorization token to download the mp3 then the API Gateway will pull the MP3 from mongoDB and Serve it to the client.
    
*) Install:
    - Docker
    - Kubectl
    - Minikube
    - K9s (https://github.com/derailed/k8s)
    - python3
    - mySQL
    

*) Technologies:
    - Python
    - MongoDB
    - MySQL
    - RabbitMQ
    - Docker
    - Kubernetes
    
*) Steps:
    *) Auth Service:
        -> './system_design/python/src/auth' contain the auth service code
        -> we will going to write all the code for this service into one file 'server.py'
        -> python3 -m venv venv
        -> activate the environment
        -> Auth Flow Overview & JWT: https://youtu.be/hmkF77F9TLw?t=1928
        -> After completion of auth server we will now write a code for the deployment for that we will going to create the docker image using docker file
        -> after build the docker image with 'docker build .' command we will now deploy the image into docker hub so that our k8s can be able to pull the image from docker hub
        -> Now we will going to write a kubernetes config inside './system_design/python/src/auth/manifests'
        -> After creating all of the configuration we will now going to deploy 'auth' service to k8s cluster
        -> Kubernetes explanation: https://youtu.be/hmkF77F9TLw?t=4773
        -> Kubernetes API References: https://kubernetes.io/docs/reference/kubernetes-api/
        
    *) Gateway Service:
        -> pip3 install pika
        -> pip3 install flask
        -> pip3 install pyMongo
        -> pip3 install Flask-PyMongo


*) Key Terms When considering microservice architecture:
    a. Synchronous Interservice Communication
        -> https://youtu.be/hmkF77F9TLw?t=6452
    b. Asynchronous Interservice Communication
        -> https://youtu.be/hmkF77F9TLw?t=6513
    c. Strong & Eventual Consistency
        -> https://youtu.be/hmkF77F9TLw?t=6664